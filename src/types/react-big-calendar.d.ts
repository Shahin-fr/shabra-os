declare module 'react-big-calendar' {
  import { ComponentType } from 'react';
  
  export interface CalendarProps {
    events?: any[];
    startAccessor?: string;
    endAccessor?: string;
    titleAccessor?: string;
    allDayAccessor?: string;
    resourceAccessor?: string;
    resourceIdAccessor?: string;
    resourceTitleAccessor?: string;
    step?: number;
    timeslots?: number;
    min?: Date;
    max?: Date;
    showMultiDayTimes?: boolean;
    popup?: boolean;
    popupOffset?: number | { x: number; y: number };
    onSelectEvent?: (event: any) => void;
    onSelectSlot?: (slotInfo: any) => void;
    onNavigate?: (date: Date, view: string) => void;
    onView?: (view: View) => void;
    onDrillDown?: (date: Date, view: string) => void;
    onRangeChange?: (range: Date[] | { start: Date; end: Date }, view?: string) => void;
    localizer?: any;
    culture?: string;
    formats?: any;
    messages?: any;
    components?: any;
    views?: any;
    view?: string;
    date?: Date;
    length?: number;
    toolbar?: boolean;
    popupComponent?: ComponentType<any>;
    eventComponent?: ComponentType<any>;
    eventWrapperComponent?: ComponentType<any>;
    dateCellWrapperComponent?: ComponentType<any>;
    timeSlotWrapperComponent?: ComponentType<any>;
    timeGutterHeaderComponent?: ComponentType<any>;
    timeGutterComponent?: ComponentType<any>;
    dayHeaderComponent?: ComponentType<any>;
    dateHeaderComponent?: ComponentType<any>;
    agendaHeaderComponent?: ComponentType<any>;
    agendaDateComponent?: ComponentType<any>;
    agendaTimeComponent?: ComponentType<any>;
    agendaDateRangeFormat?: string;
    agendaTimeFormat?: string;
    agendaTimeRangeFormat?: string;
    dayFormat?: string;
    weekdayFormat?: string;
    monthFormat?: string;
    yearFormat?: string;
    dayHeaderFormat?: string;
    dayRangeFormat?: string;
    selectRange?: boolean;
    longPressThreshold?: number;
    getDrilldownView?: (targetDate: Date, currentViewName: string, configuredViewNames: string[]) => string | null;
    onShowMore?: (events: any[], date: Date) => void;
    showMore?: (total: number) => string;
    doShowMore?: (total: number) => string;
    onDoubleClickEvent?: (event: any) => void;
    onKeyPressEvent?: (event: any) => void;
    onSelecting?: (range: { start: Date; end: Date }) => boolean | void;
    selected?: any;
    backgroundEvents?: any[];
    onBackgroundClick?: (event: any) => void;
    onBackgroundDoubleClick?: (event: any) => void;
    onBackgroundSelect?: (event: any) => void;
    onBackgroundSelectStart?: (event: any) => void;
    onBackgroundSelectEnd?: (event: any) => void;
    onBackgroundKeyDown?: (event: any) => void;
    onBackgroundKeyUp?: (event: any) => void;
    onBackgroundMouseDown?: (event: any) => void;
    onBackgroundMouseUp?: (event: any) => void;
    onBackgroundMouseMove?: (event: any) => void;
    onBackgroundMouseEnter?: (event: any) => void;
    onBackgroundMouseLeave?: (event: any) => void;
    onBackgroundMouseOver?: (event: any) => void;
    onBackgroundMouseOut?: (event: any) => void;
    onBackgroundClick?: (event: any) => void;
    onBackgroundDoubleClick?: (event: any) => void;
    onBackgroundContextMenu?: (event: any) => void;
    onBackgroundFocus?: (event: any) => void;
    onBackgroundBlur?: (event: any) => void;
    onBackgroundChange?: (event: any) => void;
    onBackgroundInput?: (event: any) => void;
    onBackgroundInvalid?: (event: any) => void;
    onBackgroundReset?: (event: any) => void;
    onBackgroundSubmit?: (event: any) => void;
    onBackgroundSelect?: (event: any) => void;
    onBackgroundSelectStart?: (event: any) => void;
    onBackgroundSelectEnd?: (event: any) => void;
    onBackgroundKeyDown?: (event: any) => void;
    onBackgroundKeyUp?: (event: any) => void;
    onBackgroundMouseDown?: (event: any) => void;
    onBackgroundMouseUp?: (event: any) => void;
    onBackgroundMouseMove?: (event: any) => void;
    onBackgroundMouseEnter?: (event: any) => void;
    onBackgroundMouseLeave?: (event: any) => void;
    onBackgroundMouseOver?: (event: any) => void;
    onBackgroundMouseOut?: (event: any) => void;
    onBackgroundClick?: (event: any) => void;
    onBackgroundDoubleClick?: (event: any) => void;
    onBackgroundContextMenu?: (event: any) => void;
    onBackgroundFocus?: (event: any) => void;
    onBackgroundBlur?: (event: any) => void;
    onBackgroundChange?: (event: any) => void;
    onBackgroundInput?: (event: any) => void;
    onBackgroundInvalid?: (event: any) => void;
    onBackgroundReset?: (event: any) => void;
    onBackgroundSubmit?: (event: any) => void;
    eventPropGetter?: (event: any, start: Date, end: Date, isSelected: boolean) => any;
    slotPropGetter?: (date: Date) => any;
    dayPropGetter?: (date: Date) => any;
    className?: string;
    style?: React.CSSProperties;
  }

  export type View = 'month' | 'week' | 'work_week' | 'day' | 'agenda';

  export interface momentLocalizer {
    (moment: any): any;
  }

  export const Calendar: ComponentType<CalendarProps>;
  export const momentLocalizer: momentLocalizer;
  export const View: {
    MONTH: string;
    WEEK: string;
    WORK_WEEK: string;
    DAY: string;
    AGENDA: string;
  };
}
