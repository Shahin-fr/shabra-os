name: Comprehensive Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npm run db:generate
      
    - name: Run comprehensive quality check
      run: node scripts/comprehensive-quality-check.js --report --verbose
      
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: quality-reports/
        retention-days: 30
        
    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportDir = 'quality-reports';
            if (fs.existsSync(reportDir)) {
              const files = fs.readdirSync(reportDir);
              const htmlReport = files.find(f => f.endsWith('.html'));
              
              if (htmlReport) {
                const reportPath = path.join(reportDir, htmlReport);
                const reportContent = fs.readFileSync(reportPath, 'utf8');
                
                // Extract summary from HTML report
                const summaryMatch = reportContent.match(/Checks Passed<\/h3>\s*<p>(\d+)\/(\d+)<\/p>/);
                const criticalMatch = reportContent.match(/Critical Issues<\/h3>\s*<p>(\d+)<\/p>/);
                
                if (summaryMatch) {
                  const passed = summaryMatch[1];
                  const total = summaryMatch[2];
                  const critical = criticalMatch ? criticalMatch[1] : '0';
                  
                  const comment = `## üîç Code Quality Report
                  
                  **Status**: ${passed === total ? '‚úÖ All checks passed' : '‚ùå Some checks failed'}
                  **Passed**: ${passed}/${total}
                  **Critical Issues**: ${critical}
                  
                  üìä [View detailed report](${htmlReport})
                  
                  ${critical === '0' && passed === total ? 'üéâ Ready for merge!' : '‚ö†Ô∏è Please review and fix issues before merging.'}`;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            }
          } catch (error) {
            console.log('Could not generate quality report comment:', error.message);
          }

  security-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm run security:audit
      
    - name: Run console verification
      run: npm run verify:no-console

  performance-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npm run db:generate
      
    - name: Run bundle analysis
      run: npm run build:analyze-bundle
      
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: analyze/
        retention-days: 30
