generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  isActive  Boolean  @default(true)
  roles     String   @default("EMPLOYEE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Task relations
  createdTasks Task[] @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignee")
  
  // Story relations
  stories Story[]

  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@index([firstName, lastName])
  @@map("users")
}

model Project {
  id          String             @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus      @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  accessLevel ProjectAccessLevel @default(PRIVATE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  stories     Story[]
  tasks       Task[]
  contentSlots ContentSlot[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([accessLevel])
  @@index([createdAt])
  @@index([name])
  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(Todo)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  createdBy   String
  assignedTo  String?
  projectId   String?
  
  creator     User       @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  assignee    User?      @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String?
  authorId  String
  isPublic  Boolean  @default(false)
  type      String   @default("DOCUMENT")
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("documents")
}

model DocumentRead {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  readAt     DateTime @default(now())

  @@map("document_reads")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  authorId    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("ideas")
}

model LeaveRequest {
  id        String      @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

  @@map("leave_requests")
}

model Attendance {
  id        String    @id @default(cuid())
  userId    String
  checkIn   DateTime  @default(now())
  checkOut  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("attendances")
}

model ContentSlot {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   @default("STORY") // Add type field for STORY/POST
  startDate   DateTime
  endDate     DateTime
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("content_slots")
}

model Story {
  id          String   @id @default(cuid())
  title       String
  content     String
  notes       String?
  visualNotes String?
  link        String?
  day         String   // Store as YYYY-MM-DD string format
  order       Int      @default(0)
  status      String   @default("DRAFT")
  projectId   String?
  storyTypeId String?
  storyIdeaId String?  // New field to link to story idea
  customTitle String?  // Custom title for specific day
  type        String?  // High-level story type for quick planning
  ideaId      String?  // Specific idea from idea bank
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  storyType   StoryType? @relation(fields: [storyTypeId], references: [id], onDelete: SetNull)
  storyIdea   StoryIdea? @relation(fields: [storyIdeaId], references: [id], onDelete: SetNull)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model StoryType {
  id          String   @id @default(cuid())
  name        String   @unique
  icon        String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relations
  stories Story[]

  @@map("story_types")
}

model StoryIdea {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // e.g., "Engagement", "Sales", "Brand Building", "Education"
  storyType   String   @default("تعامل با مخاطب") // High-level story type this idea belongs to
  template    String   // Pre-filled template for title
  guidelines  String   // Helpful tips and guidelines
  icon        String?  // Icon for the idea
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  stories Story[]

  @@map("story_ideas")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ProjectAccessLevel {
  PUBLIC
  PRIVATE
  RESTRICTED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TaskStatus {
  Todo
  InProgress
  Done
}

model TrackedInstagramPage {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  profileUrl    String
  followerCount Int      @default(0)
  status        String   @default("ACTIVE") // e.g., ACTIVE, FAILED_LAST_CHECK
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  reels         InstagramReel[]

  @@map("tracked_instagram_pages")
}

model InstagramReel {
  id              Int      @id @default(autoincrement())
  postUrl         String   @unique
  shortCode       String   @unique
  thumbnailUrl    String?
  viewCount       Int      @default(0)
  publishedAt     DateTime
  
  pageId          Int
  trackedPage     TrackedInstagramPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())

  @@map("instagram_reels")
}