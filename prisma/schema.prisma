generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  isActive  Boolean  @default(true)
  roles     String   @default("EMPLOYEE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Security constraint: Ensure unique combination of email and isActive
  // This prevents duplicate active users with the same email
  @@unique([email, isActive], name: "unique_active_email")
  
  // Password strength validation should be enforced at the application level
  // Recommended: minimum 8 characters, at least one uppercase, lowercase, number, and special character
  // This constraint cannot be enforced directly in Prisma, implement in validation layer

  // Manager-subordinate hierarchy
  managerId    String?
  manager      User?   @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates User[]  @relation("ManagerSubordinates")

  // Profile relation
  profile Profile?

  // Task relations
  createdTasks Task[] @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignee")
  
  // Story relations
  stories Story[]
  
  // Leave relations
  leaveRequests LeaveRequest[]
  reviewedLeaveRequests LeaveRequest[] @relation("LeaveRequestReviewer")
  
  // Request relations
  requests Request[]
  reviewedRequests Request[] @relation("RequestReviewer")
  
  // Document relations
  documents EmployeeDocument[]
  uploadedDocuments EmployeeDocument[] @relation("DocumentUploader")
  
  // Checklist relations
  employeeChecklists EmployeeChecklist[]
  createdChecklistTemplates ChecklistTemplate[] @relation("ChecklistTemplateCreator")
  
  // Attendance relations
  attendances Attendance[]

  // Work schedule relation
  workSchedule WorkSchedule?

  // Announcement relations
  announcements Announcement[]

  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@index([firstName, lastName])
  @@index([managerId])
  @@map("users")
}

model Profile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  jobTitle              String?
  department            String?
  startDate             DateTime?
  phoneNumber           String?
  address               String?
  emergencyContactName  String?
  emergencyContactPhone String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobTitle])
  @@index([department])
  @@map("profiles")
}

model Announcement {
  id          String                @id @default(cuid())
  title       String
  content     String
  category    AnnouncementCategory  @default(GENERAL)
  isPinned    Boolean               @default(false)
  authorId    String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Relations
  author      User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([category])
  @@index([isPinned])
  @@index([createdAt])
  @@map("announcements")
}

model Project {
  id          String             @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus      @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  accessLevel ProjectAccessLevel @default(PRIVATE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  stories     Story[]
  tasks       Task[]
  contentSlots ContentSlot[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([accessLevel])
  @@index([createdAt])
  @@index([name])
  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(Todo)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  createdBy   String
  assignedTo  String?
  projectId   String?
  
  creator     User       @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  assignee    User?      @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String?
  authorId  String
  isPublic  Boolean  @default(false)
  type      String   @default("DOCUMENT")
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("documents")
}

model DocumentRead {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  readAt     DateTime @default(now())

  @@map("document_reads")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  authorId    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("ideas")
}

model LeaveRequest {
  id               String      @id @default(cuid())
  userId           String
  leaveType        LeaveType   @default(ANNUAL)
  startDate        DateTime
  endDate          DateTime
  reason           String
  status           LeaveStatus @default(PENDING)
  rejectionReason  String?
  reviewedBy       String?
  reviewedAt       DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())

  // Relations
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer         User?       @relation("LeaveRequestReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("leave_requests")
}

model Request {
  id               String        @id @default(cuid())
  userId           String
  type             RequestType
  details          Json?         // Type-specific data stored as JSON
  reason           String
  status           RequestStatus @default(PENDING)
  rejectionReason  String?
  reviewedBy       String?
  reviewedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer         User?         @relation("RequestReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([reviewedBy])
  @@map("requests")
}

model EmployeeDocument {
  id           String           @id @default(cuid())
  userId       String
  name         String
  url          String
  publicId     String
  fileType     String
  category     DocumentCategory
  uploadedById String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedBy   User             @relation("DocumentUploader", fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([uploadedById])
  @@index([createdAt])
  @@map("employee_documents")
}

model ChecklistTemplate {
  id          String                @id @default(cuid())
  name        String
  type        ChecklistType
  description String?
  isActive    Boolean               @default(true)
  createdById String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Relations
  createdBy   User                  @relation("ChecklistTemplateCreator", fields: [createdById], references: [id], onDelete: Cascade)
  tasks       ChecklistTemplateTask[]
  employeeChecklists EmployeeChecklist[]

  @@index([type])
  @@index([isActive])
  @@index([createdById])
  @@map("checklist_templates")
}

model ChecklistTemplateTask {
  id                  String              @id @default(cuid())
  templateId          String
  title               String
  description         String?
  defaultAssigneeRole DefaultAssigneeRole
  order               Int                 @default(0)
  isRequired          Boolean             @default(true)
  estimatedDays       Int?                // Estimated days to complete
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  template            ChecklistTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([order])
  @@map("checklist_template_tasks")
}

model EmployeeChecklist {
  id          String          @id @default(cuid())
  employeeId  String
  templateId  String
  status      ChecklistStatus @default(PENDING)
  startDate   DateTime        @default(now())
  completedAt DateTime?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  employee    User            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  template    ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([templateId])
  @@index([status])
  @@index([startDate])
  @@map("employee_checklists")
}

model Attendance {
  id        String    @id @default(cuid())
  userId    String
  checkIn   DateTime  @default(now())
  checkOut  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

model ContentSlot {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   @default("STORY") // Add type field for STORY/POST
  startDate   DateTime
  endDate     DateTime
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("content_slots")
}

model Story {
  id          String   @id @default(cuid())
  title       String
  content     String
  notes       String?
  visualNotes String?
  link        String?
  day         String   // Store as YYYY-MM-DD string format
  order       Int      @default(0)
  status      String   @default("DRAFT")
  projectId   String?
  storyTypeId String?
  storyIdeaId String?  // New field to link to story idea
  customTitle String?  // Custom title for specific day
  type        String?  // High-level story type for quick planning
  ideaId      String?  // Specific idea from idea bank
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  storyType   StoryType? @relation(fields: [storyTypeId], references: [id], onDelete: SetNull)
  storyIdea   StoryIdea? @relation(fields: [storyIdeaId], references: [id], onDelete: SetNull)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model StoryType {
  id          String   @id @default(cuid())
  name        String   @unique
  icon        String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relations
  stories Story[]

  @@map("story_types")
}

model StoryIdea {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // e.g., "Engagement", "Sales", "Brand Building", "Education"
  storyType   String   @default("تعامل با مخاطب") // High-level story type this idea belongs to
  template    String   // Pre-filled template for title
  guidelines  String   // Helpful tips and guidelines
  icon        String?  // Icon for the idea
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  stories Story[]

  @@map("story_ideas")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ProjectAccessLevel {
  PUBLIC
  PRIVATE
  RESTRICTED
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
  EMERGENCY
  MATERNITY
  PATERNITY
  STUDY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum RequestType {
  LEAVE
  OVERTIME
  EXPENSE_CLAIM
  GENERAL
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum DocumentCategory {
  CONTRACT
  IDENTIFICATION
  CERTIFICATE
  PERFORMANCE_REVIEW
  MEDICAL
  PAYROLL
  OTHER
}

enum ChecklistType {
  ONBOARDING
  OFFBOARDING
}

enum ChecklistStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DefaultAssigneeRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum TaskStatus {
  Todo
  InProgress
  Done
}

enum AnnouncementCategory {
  GENERAL
  TECHNICAL
  EVENT
  IMPORTANT
}

model TrackedInstagramPage {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  profileUrl    String
  followerCount Int      @default(0)
  status        String   @default("ACTIVE") // e.g., ACTIVE, FAILED_LAST_CHECK
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  reels         InstagramReel[]

  // Security constraint: Ensure username is not empty and follows valid format
  @@index([username])
  @@map("tracked_instagram_pages")
}

model InstagramReel {
  id              Int      @id @default(autoincrement())
  postUrl         String   @unique
  shortCode       String   @unique
  thumbnailUrl    String?
  viewCount       Int      @default(0)
  publishedAt     DateTime
  
  pageId          Int
  trackedPage     TrackedInstagramPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())

  // Security constraints: Ensure data integrity
  @@index([pageId])
  @@index([publishedAt])
  @@map("instagram_reels")
}

model WorkSchedule {
  id        String   @id @default(cuid())
  userId    String   @unique
  saturday  Boolean  @default(true)
  sunday    Boolean  @default(true)
  monday    Boolean  @default(true)
  tuesday   Boolean  @default(true)
  wednesday Boolean  @default(true)
  thursday  Boolean  @default(true)
  friday    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("work_schedules")
}

model Holiday {
  id        String   @id @default(cuid())
  name      String
  date      DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
  @@map("holidays")
}