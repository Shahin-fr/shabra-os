// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  userRoles     UserRole[]
  tasks         Task[]
  documents     Document[]
  documentReads DocumentRead[]
  ideas         Idea[]
  leaveRequests LeaveRequest[]

  @@map("users")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      String   // 'admin', 'manager', 'employee'
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@map("user_roles")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("active") // 'active', 'completed', 'on-hold'
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks   Task[]
  stories Story[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    String     @default("medium") // 'low', 'medium', 'high', 'urgent'
  dueDate     DateTime?
  assignedTo  String?
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user    User?    @relation(fields: [assignedTo], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

enum TaskStatus {
  PENDING    @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED  @map("completed")
  CANCELLED  @map("cancelled")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author       User           @relation(fields: [authorId], references: [id])
  documentReads DocumentRead[]

  @@map("documents")
}

model DocumentRead {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  readAt     DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_reads")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  authorId    String
  status      String   @default("pending") // 'pending', 'approved', 'rejected', 'implemented'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])

  @@map("ideas")
}

model LeaveRequest {
  id          String      @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

enum LeaveStatus {
  PENDING   @map("pending")
  APPROVED  @map("approved")
  REJECTED  @map("rejected")
  CANCELLED @map("cancelled")
}

enum StoryStatus {
  DRAFT      @map("draft")
  READY      @map("ready")
  PUBLISHED  @map("published")
}

model StoryType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stories Story[]

  @@map("story_types")
}

model Story {
  id           String      @id @default(cuid())
  title        String
  notes        String?
  visualNotes  String?
  link         String?
  day          DateTime
  order        Int         @default(0)
  status       StoryStatus @default(DRAFT)
  projectId    String?
  storyTypeId  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  project   Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  storyType StoryType? @relation(fields: [storyTypeId], references: [id], onDelete: SetNull)

  @@map("stories")
}
