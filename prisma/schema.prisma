generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documentReads DocumentRead[]
  documents     Document[]
  ideas         Idea[]
  leaveRequests LeaveRequest[]
  tasks         Task[]
  userRoles     UserRole[]

  @@map("users")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@map("user_roles")
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  status       String        @default("active")
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  contentSlots ContentSlot[]
  stories      Story[]
  tasks        Task[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    String     @default("medium")
  dueDate     DateTime?
  assignedTo  String?
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [assignedTo], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

model Document {
  id            String         @id @default(cuid())
  title         String
  content       String
  authorId      String
  isPublic      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documentReads DocumentRead[]
  author        User           @relation(fields: [authorId], references: [id])

  @@map("documents")
}

model DocumentRead {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  readAt     DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_reads")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  authorId    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])

  @@map("ideas")
}

model LeaveRequest {
  id        String      @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

model StoryType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stories   Story[]

  @@map("story_types")
}

model Story {
  id          String      @id @default(cuid())
  title       String
  notes       String?
  visualNotes String?
  link        String?
  day         DateTime
  order       Int         @default(0)
  status      StoryStatus @default(DRAFT)
  projectId   String?
  storyTypeId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project?    @relation(fields: [projectId], references: [id])
  storyType   StoryType?  @relation(fields: [storyTypeId], references: [id])

  @@index([day])
  @@index([projectId, day])
  @@map("stories")
}

model ContentSlot {
  id        String        @id @default(cuid())
  title     String
  type      ContentType   @default(STORY)
  dayOfWeek Int
  weekStart DateTime
  order     Int           @default(0)
  notes     String?
  projectId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  project   Project?      @relation(fields: [projectId], references: [id])

  @@index([weekStart, dayOfWeek])
  @@index([projectId])
  @@map("content_slots")
}

enum TaskStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  CANCELLED   @map("cancelled")
}

enum LeaveStatus {
  PENDING   @map("pending")
  APPROVED  @map("approved")
  REJECTED  @map("rejected")
  CANCELLED @map("cancelled")
}

enum StoryStatus {
  DRAFT     @map("draft")
  READY     @map("ready")
  PUBLISHED @map("published")
}

enum ContentType {
  STORY @map("story")
  POST  @map("post")
}


